{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Notes!","text":""},{"location":"Game%20Dev/Design/1.%20Ideas%21/","title":"1. Ideas!","text":"<ul> <li>All abilities are available at the start, but hidden behind obtuse/obscure inputs/context/etc</li> <li>All items are available from the start by using one of the abilities that is always available at the start</li> <li>e.g - a music item is located in the bottom left if you stomp on the right area, but the stomp is hidden behind triple pressing down while in the air</li> <li>No words, clues are all pictures with vaugue hints</li> <li></li> </ul>"},{"location":"Game%20Dev/Design/2.%20Details/","title":"2. Details","text":"<p>Width 512 Height 288</p>"},{"location":"Main/1.%20Todo/","title":"Try your best!","text":"<ul> <li>Achieve A+ Rating on SSL Labs for yemm.dev and all subdomains</li> <li>Create structured Godot Project</li> <li>Git Versioning to game project</li> <li>Create character sprite + Splash screen</li> <li>Implement splashscreen</li> <li>Implement Main Menu</li> <li>Implement Settings</li> <li>Implement Resolution stuff</li> <li>Implement State Machine Character Controller</li> <li>Make persistent notes</li> <li>Implement basic level for character to run around</li> <li>test</li> <li>test 2</li> </ul>"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/","title":"Project Roadmap","text":""},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#overview","title":"Overview","text":"<p>Create a Godot-based automation overlay that controls and visualises an Android emulator running The Tower. Eventually, enable remote access from a mobile client to view and control the automation.</p>"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#project-phases","title":"Project Phases","text":""},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#phase-1-emulator-automation-foundation","title":"Phase 1 \u2014 Emulator Automation Foundation","text":"<p>Goal: Programmatically control and read the emulator.</p>"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#tasks","title":"Tasks","text":"<ul> <li>[x] Select emulator (LDPlayer, Nox, or Memu recommended).</li> <li>[x] Connect to emulator via ADB.</li> <li>[x] Implement screenshot capture:</li> <li><code>adb exec-out screencap -p &gt; screen.png</code></li> <li>[x] Implement tap and swipe commands:</li> <li><code>adb shell input tap x y</code></li> <li><code>adb shell input swipe x1 y1 x2 y2</code></li> <li>[ ] Write a Python helper script for basic automation.</li> <li>[ ] Use OpenCV to detect:</li> <li>[ ] Floating gems</li> <li>[ ] Ad button</li> <li>[ ] \u201cStart run\u201d button</li> <li>[ ] Implement a simple automation loop.</li> </ul>"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#milestone","title":"Milestone","text":"<p>\u2705 Can launch, collect gems, and restart automatically via Python script.</p>"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#phase-2-godot-overlay-integration","title":"Phase 2 \u2014 Godot Overlay Integration","text":"<p>Goal: Display emulator output in a Godot window and provide interactive overlay controls.</p>"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#tasks_1","title":"Tasks","text":"<ul> <li>[ ] Capture emulator window (via periodic screenshots or virtual capture).</li> <li>[ ] Create Godot UI overlay:</li> <li>[ ] Start / Stop automation toggle</li> <li>[ ] Run count</li> <li>[ ] Gems collected</li> <li>[ ] Session timer</li> <li>[ ] Integrate Python backend with Godot via WebSocket or TCP socket.</li> <li>[ ] Configurable click regions for dynamic resolutions.</li> </ul>"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#milestone_1","title":"Milestone","text":"<p>\u2705 Emulator view and automation overlay fully integrated in Godot.</p>"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#phase-3-intelligent-automation","title":"Phase 3 \u2014 Intelligent Automation","text":"<p>Goal: Add dynamic detection and self-correction logic.</p>"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#tasks_2","title":"Tasks","text":"<ul> <li>[ ] Implement image recognition for:</li> <li>[ ] \u201cRun Over\u201d screen</li> <li>[ ] Ad gems appearing</li> <li>[ ] Floating gem movement</li> <li>[ ] Use colour thresholds / template matching to detect game state.</li> <li>[ ] Replace static sleep timers with state-based waits.</li> <li>[ ] Implement logging:</li> <li>[ ] Run duration</li> <li>[ ] Gem yield</li> <li>[ ] Detected errors / fails</li> <li>[ ] Add on-screen debug mode (shows detected boxes and states).</li> </ul>"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#milestone_2","title":"Milestone","text":"<p>\u2705 Bot runs indefinitely without manual input, recovers from UI variance.</p>"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#phase-4-remote-control-streaming","title":"Phase 4 \u2014 Remote Control &amp; Streaming","text":"<p>Goal: Control and monitor automation remotely from mobile.</p>"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#tasks_3","title":"Tasks","text":"<ul> <li>[ ] Create WebSocket or REST server in Godot backend.</li> <li>[ ] Build a lightweight HTML5 or Godot client:</li> <li>[ ] Display current state (run count, gem/hour, etc.)</li> <li>[ ] Start / Stop automation</li> <li>[ ] Optional: Implement low-FPS visual feed (1\u20135 FPS screenshot stream).</li> <li>[ ] Optional: Integrate WebRTC / FFmpeg streaming for live control.</li> <li>[ ] Add mobile UI for basic interaction.</li> </ul>"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#milestone_3","title":"Milestone","text":"<p>\u2705 Remote client can connect, view stats, and control automation from phone.</p>"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#phase-5-advanced-features-qol","title":"Phase 5 \u2014 Advanced Features &amp; QoL","text":"<p>Goal: Add polish, resilience, and observability.</p>"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#tasks_4","title":"Tasks","text":"<ul> <li>[ ] Metrics dashboard (e.g. gem yield/hour, uptime, session analytics).</li> <li>[ ] Scheduler (e.g. auto-run between certain times).</li> <li>[ ] Configurable hotkeys and macros.</li> <li>[ ] Automatic coordinate recalibration on window resize.</li> <li>[ ] Optional: persistent data storage (SQLite or JSON logs).</li> <li>[ ] Add \u201cheadless\u201d mode for running without UI.</li> </ul>"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#milestone_4","title":"Milestone","text":"<p>\u2705 Fully autonomous, remotely controllable automation system.</p>"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#tech-stack-decisions","title":"\ud83e\uddf0 Tech Stack Decisions","text":"Component Tool Notes Emulator LDPlayer / Memu Good ADB and automation support Automation Backend Python + ADB + OpenCV Reliable image processing Overlay Godot (GDScript or C#) UI, visualisation, and remote interface Communication WebSocket / JSON Backend \u2194 Frontend Remote Access WebSocket + HTML5 or WebRTC Optional but nice to have"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#future-ideas","title":"\ud83e\uddea Future Ideas","text":"<ul> <li>[ ] Integrate computer vision ML model to detect UI states more robustly.</li> <li>[ ] Remote API for Discord bot integration (e.g. \u201c!stats\u201d command).</li> <li>[ ] Add live telemetry export (Prometheus / Grafana).</li> <li>[ ] Plug-in system for different idle games.</li> </ul>"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#suggested-order-of-attack","title":"\ud83d\uddd3 Suggested Order of Attack","text":"<ol> <li>Emulator automation basics (Phase 1)</li> <li>Godot overlay UI + backend comms (Phase 2)</li> <li>Game state detection improvements (Phase 3)</li> <li>Remote viewing/control (Phase 4)</li> <li>Optimisation + dashboards (Phase 5)</li> </ol>"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#folder-structure-proposed","title":"\ud83d\udcc1 Folder Structure (Proposed)","text":""},{"location":"Tower%20Automation%20Project/Code%20Snippets/Toggle%20Hyper-V/","title":"Toggle Hyper V","text":"<p>LDPlayer conflicts with Hyper-V, and it needs to be disabled.</p> <pre><code>:: Disable Hyper-V (for LDPlayer)\nbcdedit /set hypervisorlaunchtype off\nshutdown /r /t 0\n\n:: Enable Hyper-V again (for WSL/Docker)\nbcdedit /set hypervisorlaunchtype auto\nshutdown /r /t 0\n\n</code></pre>"}]}