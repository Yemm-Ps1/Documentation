{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Notes!","title":"Notes!"},{"location":"#notes","text":"","title":"Notes!"},{"location":"Game%20Dev/Design/1.%20Ideas%21/","text":"All abilities are available at the start, but hidden behind obtuse/obscure inputs/context/etc All items are available from the start by using one of the abilities that is always available at the start e.g - a music item is located in the bottom left if you stomp on the right area, but the stomp is hidden behind triple pressing down while in the air No words, clues are all pictures with vaugue hints","title":"1. Ideas!"},{"location":"Game%20Dev/Design/2.%20Details/","text":"Width 512 Height 288","title":"2. Details"},{"location":"Main/1.%20Todo/","text":"Try your best! ~~Achieve A+ Rating on SSL Labs for yemm.dev and all subdomains~~ ~~Create structured Godot Project~~ Git Versioning to game project ~~Create character sprite + Splash screen~~ Implement splashscreen Implement Main Menu Implement Settings Implement Resolution stuff Implement State Machine Character Controller Make persistent notes Implement basic level for character to run around","title":"Try your best!"},{"location":"Main/1.%20Todo/#try-your-best","text":"~~Achieve A+ Rating on SSL Labs for yemm.dev and all subdomains~~ ~~Create structured Godot Project~~ Git Versioning to game project ~~Create character sprite + Splash screen~~ Implement splashscreen Implement Main Menu Implement Settings Implement Resolution stuff Implement State Machine Character Controller Make persistent notes Implement basic level for character to run around","title":"Try your best!"},{"location":"Tower%20Automation%20Project/Design%20Decisions/","text":"","title":"Design Decisions"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/","text":"Overview Create a Godot-based automation overlay that controls and visualises an Android emulator running The Tower . Eventually, enable remote access from a mobile client to view and control the automation. Project Phases Phase 1 \u2014 Emulator Automation Foundation Goal: Programmatically control and read the emulator. Tasks [x] Select emulator (LDPlayer, Nox, or Memu recommended). [x] Connect to emulator via ADB. [x] Implement screenshot capture: adb exec-out screencap -p > screen.png [x] Implement tap and swipe commands: adb shell input tap x y adb shell input swipe x1 y1 x2 y2 [ ] Write a Python helper script for basic automation. [ ] Use OpenCV to detect: [ ] Floating gems [ ] Ad button [ ] \u201cStart run\u201d button [ ] Implement a simple automation loop. Milestone \u2705 Can launch, collect gems, and restart automatically via Python script. Phase 2 \u2014 Godot Overlay Integration Goal: Display emulator output in a Godot window and provide interactive overlay controls. Tasks [ ] Capture emulator window (via periodic screenshots or virtual capture). [ ] Create Godot UI overlay: [ ] Start / Stop automation toggle [ ] Run count [ ] Gems collected [ ] Session timer [ ] Integrate Python backend with Godot via WebSocket or TCP socket. [ ] Configurable click regions for dynamic resolutions. Milestone \u2705 Emulator view and automation overlay fully integrated in Godot. Phase 3 \u2014 Intelligent Automation Goal: Add dynamic detection and self-correction logic. Tasks [ ] Implement image recognition for: [ ] \u201cRun Over\u201d screen [ ] Ad gems appearing [ ] Floating gem movement [ ] Use colour thresholds / template matching to detect game state. [ ] Replace static sleep timers with state-based waits. [ ] Implement logging: [ ] Run duration [ ] Gem yield [ ] Detected errors / fails [ ] Add on-screen debug mode (shows detected boxes and states). Milestone \u2705 Bot runs indefinitely without manual input, recovers from UI variance. Phase 4 \u2014 Remote Control & Streaming Goal: Control and monitor automation remotely from mobile. Tasks [ ] Create WebSocket or REST server in Godot backend. [ ] Build a lightweight HTML5 or Godot client: [ ] Display current state (run count, gem/hour, etc.) [ ] Start / Stop automation [ ] Optional: Implement low-FPS visual feed (1\u20135 FPS screenshot stream). [ ] Optional: Integrate WebRTC / FFmpeg streaming for live control. [ ] Add mobile UI for basic interaction. Milestone \u2705 Remote client can connect, view stats, and control automation from phone. Phase 5 \u2014 Advanced Features & QoL Goal: Add polish, resilience, and observability. Tasks [ ] Metrics dashboard (e.g. gem yield/hour, uptime, session analytics). [ ] Scheduler (e.g. auto-run between certain times). [ ] Configurable hotkeys and macros. [ ] Automatic coordinate recalibration on window resize. [ ] Optional: persistent data storage (SQLite or JSON logs). [ ] Add \u201cheadless\u201d mode for running without UI. Milestone \u2705 Fully autonomous, remotely controllable automation system. \ud83e\uddf0 Tech Stack Decisions Component Tool Notes Emulator LDPlayer / Memu Good ADB and automation support Automation Backend Python + ADB + OpenCV Reliable image processing Overlay Godot (GDScript or C#) UI, visualisation, and remote interface Communication WebSocket / JSON Backend \u2194 Frontend Remote Access WebSocket + HTML5 or WebRTC Optional but nice to have \ud83e\uddea Future Ideas [ ] Integrate computer vision ML model to detect UI states more robustly. [ ] Remote API for Discord bot integration (e.g. \u201c!stats\u201d command). [ ] Add live telemetry export (Prometheus / Grafana). [ ] Plug-in system for different idle games. \ud83d\uddd3 Suggested Order of Attack Emulator automation basics (Phase 1) Godot overlay UI + backend comms (Phase 2) Game state detection improvements (Phase 3) Remote viewing/control (Phase 4) Optimisation + dashboards (Phase 5) \ud83d\udcc1 Folder Structure (Proposed)","title":"Project Roadmap"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#overview","text":"Create a Godot-based automation overlay that controls and visualises an Android emulator running The Tower . Eventually, enable remote access from a mobile client to view and control the automation.","title":"Overview"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#project-phases","text":"","title":"Project Phases"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#phase-1-emulator-automation-foundation","text":"Goal: Programmatically control and read the emulator.","title":"Phase 1 \u2014 Emulator Automation Foundation"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#tasks","text":"[x] Select emulator (LDPlayer, Nox, or Memu recommended). [x] Connect to emulator via ADB. [x] Implement screenshot capture: adb exec-out screencap -p > screen.png [x] Implement tap and swipe commands: adb shell input tap x y adb shell input swipe x1 y1 x2 y2 [ ] Write a Python helper script for basic automation. [ ] Use OpenCV to detect: [ ] Floating gems [ ] Ad button [ ] \u201cStart run\u201d button [ ] Implement a simple automation loop.","title":"Tasks"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#milestone","text":"\u2705 Can launch, collect gems, and restart automatically via Python script.","title":"Milestone"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#phase-2-godot-overlay-integration","text":"Goal: Display emulator output in a Godot window and provide interactive overlay controls.","title":"Phase 2 \u2014 Godot Overlay Integration"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#tasks_1","text":"[ ] Capture emulator window (via periodic screenshots or virtual capture). [ ] Create Godot UI overlay: [ ] Start / Stop automation toggle [ ] Run count [ ] Gems collected [ ] Session timer [ ] Integrate Python backend with Godot via WebSocket or TCP socket. [ ] Configurable click regions for dynamic resolutions.","title":"Tasks"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#milestone_1","text":"\u2705 Emulator view and automation overlay fully integrated in Godot.","title":"Milestone"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#phase-3-intelligent-automation","text":"Goal: Add dynamic detection and self-correction logic.","title":"Phase 3 \u2014 Intelligent Automation"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#tasks_2","text":"[ ] Implement image recognition for: [ ] \u201cRun Over\u201d screen [ ] Ad gems appearing [ ] Floating gem movement [ ] Use colour thresholds / template matching to detect game state. [ ] Replace static sleep timers with state-based waits. [ ] Implement logging: [ ] Run duration [ ] Gem yield [ ] Detected errors / fails [ ] Add on-screen debug mode (shows detected boxes and states).","title":"Tasks"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#milestone_2","text":"\u2705 Bot runs indefinitely without manual input, recovers from UI variance.","title":"Milestone"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#phase-4-remote-control-streaming","text":"Goal: Control and monitor automation remotely from mobile.","title":"Phase 4 \u2014 Remote Control &amp; Streaming"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#tasks_3","text":"[ ] Create WebSocket or REST server in Godot backend. [ ] Build a lightweight HTML5 or Godot client: [ ] Display current state (run count, gem/hour, etc.) [ ] Start / Stop automation [ ] Optional: Implement low-FPS visual feed (1\u20135 FPS screenshot stream). [ ] Optional: Integrate WebRTC / FFmpeg streaming for live control. [ ] Add mobile UI for basic interaction.","title":"Tasks"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#milestone_3","text":"\u2705 Remote client can connect, view stats, and control automation from phone.","title":"Milestone"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#phase-5-advanced-features-qol","text":"Goal: Add polish, resilience, and observability.","title":"Phase 5 \u2014 Advanced Features &amp; QoL"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#tasks_4","text":"[ ] Metrics dashboard (e.g. gem yield/hour, uptime, session analytics). [ ] Scheduler (e.g. auto-run between certain times). [ ] Configurable hotkeys and macros. [ ] Automatic coordinate recalibration on window resize. [ ] Optional: persistent data storage (SQLite or JSON logs). [ ] Add \u201cheadless\u201d mode for running without UI.","title":"Tasks"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#milestone_4","text":"\u2705 Fully autonomous, remotely controllable automation system.","title":"Milestone"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#tech-stack-decisions","text":"Component Tool Notes Emulator LDPlayer / Memu Good ADB and automation support Automation Backend Python + ADB + OpenCV Reliable image processing Overlay Godot (GDScript or C#) UI, visualisation, and remote interface Communication WebSocket / JSON Backend \u2194 Frontend Remote Access WebSocket + HTML5 or WebRTC Optional but nice to have","title":"\ud83e\uddf0 Tech Stack Decisions"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#future-ideas","text":"[ ] Integrate computer vision ML model to detect UI states more robustly. [ ] Remote API for Discord bot integration (e.g. \u201c!stats\u201d command). [ ] Add live telemetry export (Prometheus / Grafana). [ ] Plug-in system for different idle games.","title":"\ud83e\uddea Future Ideas"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#suggested-order-of-attack","text":"Emulator automation basics (Phase 1) Godot overlay UI + backend comms (Phase 2) Game state detection improvements (Phase 3) Remote viewing/control (Phase 4) Optimisation + dashboards (Phase 5)","title":"\ud83d\uddd3 Suggested Order of Attack"},{"location":"Tower%20Automation%20Project/Project%20Roadmap/#folder-structure-proposed","text":"","title":"\ud83d\udcc1 Folder Structure (Proposed)"},{"location":"Tower%20Automation%20Project/Code%20Snippets/Toggle%20Hyper-V/","text":"LDPlayer conflicts with Hyper-V, and it needs to be disabled. :: Disable Hyper-V (for LDPlayer) bcdedit /set hypervisorlaunchtype off shutdown /r /t 0 :: Enable Hyper-V again (for WSL/Docker) bcdedit /set hypervisorlaunchtype auto shutdown /r /t 0","title":"Toggle Hyper V"}]}